{
  "mainALGO": "import java.util.ArrayList;\r\nimport java.util.LinkedList;\r\nimport java.util.Queue;\r\n\r\npublic class BreadthFirstSearch\r\n{\r\n    //structure of a node that contains data and node's state\r\n    static class Node\r\n    {\r\n        int data;\r\n        boolean visited;\r\n        Node(int data)\r\n        {\r\n            this.data = data;\r\n        }\r\n    }\r\n    //just a queue to maintain bfs\r\n    private Queue<Node> queue;\r\n    //let's define initial list of nodes\r\n    static ArrayList<Node> list_of_nodes = new ArrayList<Node>();\r\n    public BreadthFirstSearch()\r\n    {\r\n        queue = new LinkedList<Node>();\r\n    }\r\n    // finding the neighbors of node\r\n    // making use of adjacency matrix\r\n    // if adjMatrix[i][j]==1, then nodes at index i and index j are connected\r\n    public ArrayList<Node> findNeighbours(int adjMatrix[][],Node node)\r\n    {\r\n        int index = -1;\r\n        ArrayList<Node> neighbours = new ArrayList<Node>();\r\n        for (int i = 0; i < list_of_nodes.size(); i++)\r\n        {\r\n            if (list_of_nodes.get(i).equals(node))\r\n            {\r\n                index = i;\r\n                break;\r\n            }\r\n        }\r\n        if (index != -1)\r\n        {\r\n            for (int j = 0; j < adjMatrix[index].length; j++)\r\n            {\r\n                if (adjMatrix[index][j] == 1)\r\n                    neighbours.add(list_of_nodes.get(j));\r\n            }\r\n        }\r\n        return neighbours;\r\n    }\r\n\r\n    public  void bfs(int adjacency_matrix[][], Node node)\r\n    {\r\n        queue.add(node);\r\n        node.visited = true;\r\n        while (!queue.isEmpty())\r\n        {\r\n            Node element = queue.remove();\r\n            System.out.print(element.data + \"\\t\");\r\n            ArrayList<Node> neighbours=findNeighbours(adjacency_matrix,element);\r\n            for (int i = 0; i < neighbours.size(); i++)\r\n            {\r\n                Node n = neighbours.get(i);\r\n                if(n != null && !n.visited)\r\n                {\r\n                    queue.add(n);\r\n                    n.visited = true;\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    public static void main(String arg[])\r\n    {\r\n        Node n1, n2, n3, n4, n5, n6, n7;\r\n        n1 = new Node(45);\r\n        n2 = new Node(27);\r\n        n3 = new Node(33);\r\n        n4 = new Node(55);\r\n        n5 = new Node(99);\r\n        n6 = new Node(84);\r\n        n7 = new Node(67);\r\n\r\n        list_of_nodes.add(n1);\r\n        list_of_nodes.add(n2);\r\n        list_of_nodes.add(n3);\r\n        list_of_nodes.add(n4);\r\n        list_of_nodes.add(n5);\r\n        list_of_nodes.add(n6);\r\n        list_of_nodes.add(n7);\r\n\r\n        int adjacency_matrix[][] = {\r\n                {0,1,1,0,0,0,0},  // Node 1: 45\r\n                {0,0,0,1,0,0,0},  // Node 2 :27\r\n                {0,1,0,1,1,1,0},  // Node 3: 33\r\n                {0,0,0,0,1,0,0},  // Node 4: 55\r\n                {0,0,0,0,0,0,1},  // Node 5: 99\r\n                {0,0,0,0,0,0,1},  // Node 6: 84\r\n                {0,0,0,0,0,0,0},  // Node 7: 67\r\n        };\r\n\r\n        System.out.println(\"Output\");\r\n        BreadthFirstSearch bfs = new BreadthFirstSearch();\r\n        bfs.bfs(adjacency_matrix, n1);\r\n    }\r\n}\r\n\r\n\r\n// Output:\r\n// 45\t27\t33\t55\t99\t84\t67"
}
